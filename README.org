#+title: SVG Images in Emacs
#+author: Andrei Kramer-Miehe
#+date: <2024-10-01 Tue>

Here are some thoughts about concepts that I don't find immediately
self evident.

The code written here constructs images in a mathematical way,
ideally. This is similar to TikZ in a way, but not as tied to LaTeX.

I also like TikZ and use it.

* SVG images are weird

Pixels are weird. The default unit in SVG images
are pixels. But, this is a vector graphic format, so pixels make no
sense. Vector graphics are great because you can zoom in and see no
anti-aliasing artifacts. Zooming in means that more screen pixels are
displaying each image pixel.

By default, the svg elisp package will print unitless numbers, which
by default are interpreted as pixels. I interpret this as:

\begin{equation}
 1\,\text{px} = f\,\text{cm}
\end{equation}

where $f$ is some small fractional number. But, in some circumstances
a software may try to make the pixel size of the image literally
correspond to the number of pixels of a screen, before anyone tries to
zoom anything.

TIFFs, PNGs and JPGs can also be zoomed, even though they are more
literally connected to pixels. So, maybe this is not so weird.

* XML is weird

In XML documents, data is bracketed in tags. This isn't very bad,
perhaps inelegant. But, all XML formats keep storing important data as
attributes. So, some of the data is hierarchical, but eventually
people give up and store lots of data in a serial string that is
parsed differently.

One important example:

#+begin_src xml
  <!-- here units are not allowed: -->
  <path d="M 6 54 L 6 -46" stroke="black" stroke-width="3"></path>
  <!-- but in other places they are allowed -->
#+end_src

where the =path= data block is empty, but all information is in the
=d= attribute, which has its own internal rules (for parsing).

I guess that this could have looked like this:
#+begin_src xml
  <path stroke="black" stroke-width="3mm">
    <move unit="cm">
      <x>6</x>
      <y>54</y>
    </move>
    <line unit="cm">
      <x>6</x>
      <y>-46</y>
    </line>
  </path>
  <!-- or whatever -->
#+end_src

XML also comes with namespaces, they make everything longer and more
complicated. Software does not try to write minimal XML.

I created an fodg image with LibreOffice Draw, it's an XML format. The
image is a 4:3 screen page, with one circle on it. The file has 36113
characters...

#+begin_src sh "XML output is verbose" :exports both
grep -o xmlns arbitrary-circle.fodg | wc -l | awk '{print "xmlns: " $1}'
xml_grep --count '*' arbitrary-circle.fodg | awk 'NR==1 {print "any-tag: ", $2}'
#+end_src

#+RESULTS:
| xmlns:   |  63 |
| any-tag: | 311 |

So, there are 311 tags to describe a single circle on a rectangle, and 63 namespaces are
invoked. I don't like any of this.

Observe that for some reason, the fodg file contains my ~PrinterSetup~
with ~config:type="base64Binary"~. And also reveals where I was, when I
made it. None of this is necessary to draw a circle. The eps file is
not compressed, but much smaller (probably still contains unnecessary
data): 2868 characters.

** In Summary

I don't like XML, SVG, nor CSS. But, they are /available/.

Elisp is interesting enough to experiment with, and I am trying to
learn the syntax by constructing images with code.

Maybe elisp is not the most awesomest language to ever exist, but I
think that (e)lisp files are more readable than xml content, because
they are almost always written by humans.

I don't know of a simple, free vector image format that is widely
adopted, and accessible. I guess that Inkscape would offer it, if it
existed. But, my search continues.

* A Circle with some label on it

[[./svg-test.el][svg-test.el]] is a small script that creates a circle with a label on it.
Here I wanted to follow two rules:

1. The coordinates must not be in quoted blocks (they need to be
   subject to calculations).
2. The size/length quantities should ideally be in some physical unit
   (e.g. centimeters, or em).

The examples in the official documentation use quoting and literal
numbers mostly.

#+begin_src elisp
  (svg-path svg '((moveto ((200 . 100)))
		  (lineto ((100 . 200) (0 . 100))))
	    :fill "yellow" :stroke "red")
#+end_src

where the entire ~svg-path~ is quoted and cannot contain calculations
(Or at least: I don't know how it could).  So, instead:

#+begin_src elsip
    (svg-path svg (list (list 'moveto (list (cons (* 2 100) 100))) ; e.g.
		  (list 'lineto (list (cons 100 200) (cons 0 100))))
	    :fill "yellow" :stroke "red")
;; or whatever calculations are necessary
#+end_src

See, the full el file. The result is:

[[./circle.svg][circle.svg]],

... albeit re-indented with new linefeeds inserted to make it more readable.
Unedited ~svg-print~ has everything in one line.

Unfortunately, the path command in SVG, with the weird string parsing
rules doesn't understand units, so, while most things work the path
command doesn't. In SVG language they use words like "viewport", viewBox, user
coordinates. So, perhaps we need to define functions that convert
between centimeters and pixels.

There is a bad workaround, whcih requires a ~viewBox~ attribute to be
defined, but the emacs svg package doesn't do that.

** Summary

The ~path~ element prevents SVG images to be in physical units without
postprocessing what ~svg-print~ writes.

* Improved ELISP Code

In the second version of this script
[[./svg-test-px.el][svg-test-px.el]], the two helper functions =cm=
and =mm= are now converting the input to pixels and don't add a unit
to them to keep the ~path~ elements happy, they also round to the
nearest pixel. DPI values are often not up to us, it is not stored in
the SVG file itself. So, if Inkscape changes its default DPI value for
exports, then the image size will probably change when the image is
exported to PDF (not tested).

I wonder what a vector display would project.

But, since DPI values are in relation to inches, pixels per centimeter
is not a round number for a given integer DPI value, therefore we
round, this may create unwanted 1-px-gaps somewhere.

Font size is probably in pixels as well, when writing the elisp
attribute. Using a conversion function from points to pixels makes the
font-size almost correct in Inkscape.

** Summary

The image now works, it just makes no sense as a vector graphic. But,
exported to PDF, it becomes exactly 12cm Ã— 8cm (as intended, with the
guessed DPI). Exported to PNG it has exactly the number of pixels the
raw SVG numbers say.

* Logarithmic Paper

In this example, the goal is to draw a sheet of logarithmic paper.

[[log-paper.el][./log-paper.el]]

Here, ~mapcar~ and ~dolist~ were very useful.

It's not easy to deal with the fact that =elisp= has many types, but
the types are not that different from one another (list, array,
sequence) and most functions are not capable of applying over lists if
they are not defined for lists.

As an example:

#+begin_src R  :exports both
  a <- 17.0     # a scalar
  x <- seq(4)   # a vector
  c(log(a),log(x))
#+end_src

#+RESULTS:
|  2.83321334405622 |
|                 0 |
| 0.693147180559945 |
|  1.09861228866811 |
|  1.38629436111989 |

In elisp, this is very different:

#+begin_src elisp
  (log 1)
  (log '(1 2 3))
  (log (last '(1 2 3)))
  (log (car (last '(1 2 3))))
#+end_src

#+results:
| (log 1)                     |                 0.0 |
| (log '(1 2 3))              | Wrong type argument |
| (log (last '(1 2 3)))       | Wrong type argument |
| (log (car (last '(1 2 3)))) |  1.0986122886681098 |

So, elisp seems to turn ugly really quickly and requires the
definition of countless wrappers. (This has probably been remarked on
countless times, but ~car~ and ~cdr~ are the most stupid names that I
have ever seen for such fundamental parts of a language).
